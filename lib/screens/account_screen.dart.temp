import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:e_commerce/screens/login_screen.dart';
import 'package:e_commerce/screens/registration_screen.dart';
import 'package:e_commerce/screens/orders_screen.dart';
import 'package:e_commerce/screens/product_screen.dart';
import 'package:e_commerce/screens/virtual_wallet_screen.dart';
import 'package:e_commerce/screens/notifications/account_notifications.dart';
import 'package:e_commerce/screens/settings_screen.dart';
import 'package:e_commerce/screens/help_center_screen.dart';

class AccountScreen extends StatefulWidget {
  const AccountScreen({Key? key}) : super(key: key);

  @override
  _AccountScreenState createState() => _AccountScreenState();
}

class _AccountScreenState extends State<AccountScreen> {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  
  User? _currentUser;
  bool _isLoading = false;
  String _userName = '';
  bool _isRegisteredSeller = false;
  String? _sellerId;
  String _sellerStatus = 'pending';
  bool _isSellerApproved = false;

  @override
  void initState() {
    super.initState();
    _getCurrentUser();
  }

  Future<void> _getCurrentUser() async {
    setState(() {
      _isLoading = true;
    });

    _currentUser = _auth.currentUser;
    
    if (_currentUser != null) {
      try {
        // Try to get user data from Firestore
        final userDocRef = _firestore.collection('users').doc(_currentUser!.uid);
        
        try {
          final userDoc = await userDocRef.get();
          if (userDoc.exists) {
            // Get the user name from Firestore
            final userData = userDoc.data();
            if (userData != null && userData.containsKey('name')) {
              setState(() {
                _userName = userData['name'];
              });
            }
          }
          
          // Check if user is already registered as a seller
          try {
            final sellerQuery = await _firestore
                .collection('sellers')
                .where('email', isEqualTo: _currentUser!.email)
                .limit(1)
                .get();
            
            if (sellerQuery.docs.isNotEmpty) {
              final sellerData = sellerQuery.docs.first.data();
              String sellerStatus = sellerData['status'] ?? 'pending';
              bool isApproved = sellerStatus == 'active' || sellerStatus == 'approved';
              bool previousApprovalStatus = _isSellerApproved;
              
              setState(() {
                _isRegisteredSeller = true;
                _sellerId = sellerData['id'];
                _sellerStatus = sellerStatus;
                _isSellerApproved = isApproved;
              });
              
              // If seller status has changed since last check, show an appropriate notification
              if (_isSellerApproved && !previousApprovalStatus) {
                _showStatusChangeNotification(isApproved: true);
              } else if (!_isSellerApproved && previousApprovalStatus) {
                _showStatusChangeNotification(isApproved: false);
              } else if (!_isSellerApproved && sellerStatus == 'pending') {
                // Show pending status notification
                _showPendingStatusReminder();
              }
            }
          } catch (sellerQueryError) {
            print('Firestore seller query error: $sellerQueryError');
          }
        } catch (error) {
          print('Firestore error: $error');
          // Handle the Firestore permission error based on the memory
        }
      } catch (e) {
        print('Error fetching user data: $e');
      }
    }

    setState(() {
      _isLoading = false;
    });
  }
  
  // New method to show status change notification
  void _showStatusChangeNotification({required bool isApproved}) {
    if (!mounted) return;
    
    Future.delayed(Duration(milliseconds: 500), () {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          backgroundColor: isApproved ? Colors.green : Colors.red,
          content: Text(
            isApproved 
            ? 'Your seller account has been approved! You can now add products.'
            : 'Your seller account status has changed. Please check details.',
            style: TextStyle(color: Colors.white),
          ),
          duration: Duration(seconds: 5),
          action: SnackBarAction(
            label: 'VIEW',
            textColor: Colors.white,
            onPressed: () {
              // Navigate to notification details or seller settings
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => AccountNotifications()),
              );
            },
          ),
        ),
      );
    });
  }
  
  // New method to show pending status reminder
  void _showPendingStatusReminder() {
    if (!mounted) return;
    
    Future.delayed(Duration(milliseconds: 500), () {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          backgroundColor: Colors.amber,
          content: Text(
            'Your seller account is pending approval. We\'ll notify you once it\'s approved.',
            style: TextStyle(color: Colors.black87),
          ),
          duration: Duration(seconds: 4),
          action: SnackBarAction(
            label: 'OK',
            textColor: Colors.black87,
            onPressed: () {
              ScaffoldMessenger.of(context).hideCurrentSnackBar();
            },
          ),
        ),
      );
    });
  }

  Future<void> _logout() async {
    try {
      await _auth.signOut();
      if (mounted) {
        Navigator.pushAndRemoveUntil(
          context,
          MaterialPageRoute(builder: (context) => const LoginScreen()),
          (route) => false,
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error logging out: $e')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return Scaffold(
        body: Center(
          child: CircularProgressIndicator(
            valueColor: AlwaysStoppedAnimation<Color>(Colors.green),
          ),
        ),
      );
    }

    // If user is not logged in, show login prompt
    if (_currentUser == null) {
      return Scaffold(
        appBar: AppBar(
          title: const Text('Account'),
         backgroundColor: Colors.green,
        foregroundColor: Colors.white,
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Text(
                'Please login to view your account',
                style: TextStyle(fontSize: 16),
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => const LoginScreen()),
                  );
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 12),
                ),
                child: const Text('Login'),
              ),
              const SizedBox(height: 10),
              TextButton(
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => const RegistrationScreen()),
                  );
                },
                child: const Text(
                  'Don\'t have an account? Register',
                  style: TextStyle(color: Colors.green),
                ),
              ),
            ],
          ),
        ),
      );
    }

    // User is logged in
    return Scaffold(
      appBar: AppBar(
        title: const Text('My Account'),
        backgroundColor: Colors.green,
        foregroundColor: Colors.white,
      ),
      body: RefreshIndicator(
        onRefresh: _getCurrentUser,
        child: ListView(
          children: [
            // User profile area
            Container(
              padding: const EdgeInsets.all(20),
              color: Colors.green.shade50,
              child: Column(
                children: [
                  const CircleAvatar(
                    radius: 40,
                    backgroundColor: Colors.green,
                    child: Icon(
                      Icons.person,
                      size: 40,
                      color: Colors.white,
                    ),
                  ),
                  const SizedBox(height: 10),
                  Text(
                    _userName.isNotEmpty ? _userName : _currentUser!.email ?? 'User',
                    style: const TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  Text(
                    _currentUser!.email ?? '',
                    style: TextStyle(
                      color: Colors.grey[600],
                    ),
                  ),
                  const SizedBox(height: 10),
                  // Seller badge or register as seller button
                  if (_isRegisteredSeller) 
                    Container(
                      margin: const EdgeInsets.only(top: 5),
                      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      decoration: BoxDecoration(
                        color: _isSellerApproved ? Colors.green : Colors.amber,
                        borderRadius: BorderRadius.circular(20),
                      ),
                      child: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Icon(
                            _isSellerApproved ? Icons.verified : Icons.pending,
                            size: 16,
                            color: _isSellerApproved ? Colors.white : Colors.black87,
                          ),
                          const SizedBox(width: 4),
                          Text(
                            _isSellerApproved 
                              ? 'Verified Seller' 
                              : 'Pending Approval',
                            style: TextStyle(
                              fontSize: 12,
                              fontWeight: FontWeight.bold,
                              color: _isSellerApproved ? Colors.white : Colors.black87,
                            ),
                          ),
                        ],
                      ),
                    ) 
                  else
                    OutlinedButton.icon(
                      onPressed: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => RegistrationScreen(initialTab: 1),
                          ),
                        );
                      },
                      icon: const Icon(Icons.store),
                      label: const Text('Register as Seller'),
                      style: OutlinedButton.styleFrom(
                        foregroundColor: Colors.green,
                      ),
                    ),
                ],
              ),
            ),
            
            // Account sections
            const Padding(
              padding: EdgeInsets.all(16),
              child: Text(
                'My Account',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
            
            // Orders
            ListTile(
              leading: const Icon(Icons.shopping_bag_outlined),
              title: const Text('Orders'),
              subtitle: const Text('View your order history'),
              onTap: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const OrdersScreen()),
                );
              },
              trailing: const Icon(Icons.chevron_right),
            ),
            
            const Divider(),
            
            // Wallet
            ListTile(
              leading: const Icon(Icons.account_balance_wallet_outlined),
              title: const Text('Wallet'),
              subtitle: const Text('Manage your virtual wallet'),
              onTap: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => VirtualWalletScreen()),
                );
              },
              trailing: const Icon(Icons.chevron_right),
            ),
            
            const Divider(),
            
            // Seller section - only show if registered as seller
            if (_isRegisteredSeller) ...[
              ListTile(
                leading: const Icon(Icons.store_outlined),
                title: const Text('My Products'),
                subtitle: Text(
                  _isSellerApproved 
                    ? 'Manage your store items' 
                    : 'Your seller account is pending approval',
                ),
                onTap: _isSellerApproved ? () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => ProductScreen(sellerId: _sellerId),
                    ),
                  );
                } : null,
                trailing: const Icon(Icons.chevron_right),
                enabled: _isSellerApproved,
              ),
              const Divider(),
            ],
            
            // Settings
            ListTile(
              leading: const Icon(Icons.settings_outlined),
              title: const Text('Settings'),
              subtitle: const Text('App preferences, notifications'),
              onTap: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const SettingsScreen()),
                );
              },
              trailing: const Icon(Icons.chevron_right),
            ),
            
            const Divider(),
            
            // Help Center
            ListTile(
              leading: const Icon(Icons.help_outline),
              title: const Text('Help Center'),
              subtitle: const Text('FAQ, contact support'),
              onTap: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const HelpCenterScreen()),
                );
              },
              trailing: const Icon(Icons.chevron_right),
            ),
            
            const Divider(),
            
            // Logout
            ListTile(
              leading: const Icon(Icons.logout, color: Colors.red),
              title: const Text('Logout', style: TextStyle(color: Colors.red)),
              onTap: _logout,
            ),
            
            const SizedBox(height: 40),
          ],
        ),
      ),
    );
  }
}
